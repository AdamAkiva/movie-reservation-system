services:
  mrs-pg:
    hostname: mrs-pg
    container_name: mrs-pg
    # Restart is disabled to allow reading the correct status code from the container
    restart: "no"
    image: postgres:17.2-alpine
    user: ${UID}:${GID}
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      # Used by a script to create multiple empty database with the given names (without space(s) after the comma(s))
      - POSTGRES_DATABASES=mrs,mrs_test
      - PSQL_HISTORY=/var/lib/postgresql/data/.psql_history
    volumes:
      - ./dev-data/pg:/var/lib/postgresql/data:rw
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
      # See: https://github.com/docker-library/docs/blob/master/postgres/README.md#arbitrary---user-notes
      - /etc/passwd:/etc/passwd:ro
      # See: https://stackoverflow.com/a/44440563
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # PostgresQL config options instead of passing it via the CLI
      - ./scripts/postgresql.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432 -U admin -d mrs && pg_isready -p 5432 -U admin -d mrs_test"]
      interval: 3s
      timeout: 2s
      retries: 5
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'

  mrs:
    hostname: mrs
    container_name: mrs
    # Restart is disabled to allow reading the correct status code from the container
    restart: "no"
    build:
      context: ./
      dockerfile: Dockerfile
      target: backend-dev
    user: ${UID}:${GID}
    # Environment variables are hard-coded due to it being a local development environment
    environment:
      # Server options
      - SERVER_PORT=4334
      - SERVER_DEBUG_PORT=4335
      - SERVER_BASE_URL=http://localhost
      - HTTP_ROUTE=api/v0
      - ALLOWED_HOSTS=::,127.0.0.1,localhost
      - ALLOWED_ORIGINS=*
      # Database URIs
      - DATABASE_URL=postgres://admin:admin@mrs-pg:5432/mrs
      - DATABASE_TEST_URL=postgres://admin:admin@mrs-pg:5432/mrs_test
      # Encryption salt
      - HASH_SECRET=00c70f6848e9466beec4148b0b3cae89
      # Admin user data
      - ADMIN_ROLE_ID=4d9097e1-3821-46f0-b19f-a75c02de9cb6
      - ADMIN_ROLE_NAME=admin
      - ADMIN_EMAIL=admin@admin.com
      - ADMIN_PASSWORD=bla123
      # Node flags
      - NODE_ENV=development
      # libuv options
      - UV_THREADPOOL_SIZE=${UV_THREADPOOL_SIZE}
    volumes:
      - ./:/home/node/mrs:rw
      # Volume npm cache to speed up the npm install. This should allow cache reuse
      # whenever node_modules are removed.
      # See: https://docs.npmjs.com/cli/v6/using-npm/config#cache
      - ./npm-cache:/home/node/.npm:rw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # tty enables better log format for npm and debug. Using it in development
    # is not an issue, however, don't enable it production since there's no need
    tty: true
    stdin_open: true
    # Disallow going crazy with memory usage without being aware of it
    mem_limit: 2048m
    ports:
      # The backend is proxied by nginx so it is not directly exposed
      - 4335:4335
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -o /dev/null -w '%{http_code}' http://localhost:4334/alive | grep -q '204' &&
          curl -s -o /dev/null -w '%{http_code}' http://localhost:4334/ready | grep -q '204'"
        ]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 30s
    depends_on:
      mrs-pg:
        condition: service_healthy

  mrs-nginx:
    hostname: mrs-nginx
    container_name: mrs-nginx
    # Restart is disabled to allow reading the correct status code from the container
    restart: "no"
    build:
      context: ./
      dockerfile: Dockerfile
      target: nginx
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # Disallow going crazy with memory usage without being aware of it
    mem_limit: 128m
    ports:
      # Map localhost:5445 to nginx:80
      - 5445:80
    depends_on:
      mrs:
        condition: service_healthy
