import prettier from 'eslint-config-prettier';
import security from 'eslint-plugin-security';
import globals from 'globals';
import tslint from 'typescript-eslint';

/**********************************************************************************/

export default tslint.config({
  plugins: {
    '@typescript-eslint': tslint.plugin,
    '@security': security,
  },
  extends: [prettier],
  files: ['{src,__tests__}/**/*.ts', 'eslint.config.js'],
  languageOptions: {
    globals: {
      ...globals.builtin,
      ...globals.node,
      ...globals.es2025,
    },
    ecmaVersion: 'latest',
    sourceType: 'module',
    parser: tslint.parser,
    parserOptions: {
      project: './tsconfig.json',
    },
  },
  linterOptions: {
    reportUnusedDisableDirectives: 2,
  },
  rules: {
    // JavaScript
    'array-callback-return': ['error', { checkForEach: true }],
    'constructor-super': 'error',
    'for-direction': 'error',
    'getter-return': 'error',
    'no-async-promise-executor': 'error',
    'no-await-in-loop': 'error',
    'no-class-assign': 'error',
    'no-compare-neg-zero': 'error',
    'no-cond-assign': 'error',
    'no-const-assign': 'error',
    'no-constant-binary-expression': 'error',
    'no-constant-condition': 'error',
    'no-constructor-return': 'error',
    'no-control-regex': 'error',
    'no-debugger': 'error',
    'no-dupe-args': 'error',
    'no-dupe-class-members': 'error',
    'no-dupe-else-if': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': ['error', { includeExports: true }],
    'no-empty-character-class': 'error',
    'no-empty-pattern': 'error',
    'no-ex-assign': 'error',
    'no-func-assign': 'error',
    'no-import-assign': 'error',
    'no-inner-declarations': 'error',
    'no-invalid-regexp': 'error',
    'no-irregular-whitespace': 'error',
    'no-loss-of-precision': 'error',
    'no-misleading-character-class': 'error',
    'no-new-native-nonconstructor': 'error',
    'no-obj-calls': 'error',
    'no-promise-executor-return': 'error',
    'no-prototype-builtins': 'error',
    'no-self-assign': 'error',
    'no-self-compare': 'error',
    'no-setter-return': 'error',
    'no-sparse-arrays': 'error',
    'no-template-curly-in-string': 'error',
    'no-this-before-super': 'error',
    'no-undef': 'error',
    'no-unexpected-multiline': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unreachable': 'error',
    'no-unreachable-loop': 'error',
    'no-unsafe-finally': 'error',
    'no-unsafe-negation': 'error',
    'no-unsafe-optional-chaining': 'error',
    'no-unused-private-class-members': 'error',
    'no-unused-vars': [
      'error',
      { args: 'after-used', ignoreRestSiblings: true },
    ],
    'no-use-before-define': 'error',
    'no-useless-assignment': 'error',
    'no-useless-backreference': 'error',
    'require-atomic-updates': 'error',
    'use-isnan': 'error',
    'valid-typeof': 'error',
    'arrow-body-style': ['error', 'always'],
    'class-methods-use-this': 'error',
    complexity: 'error',
    'consistent-return': 'error',
    curly: 'error',
    'default-case-last': 'error',
    'default-param-last': 'error',
    'dot-notation': 'error',
    eqeqeq: 'error',
    'guard-for-in': 'error',
    'init-declarations': ['error', 'always'],
    'max-classes-per-file': 'error',
    'max-depth': ['error', 4],
    'max-params': ['error', 4],
    'no-array-constructor': 'error',
    'no-caller': 'error',
    'no-case-declarations': 'error',
    'no-delete-var': 'error',
    'no-else-return': 'error',
    'no-empty': 'error',
    'no-empty-function': 'error',
    'no-empty-static-block': 'error',
    'no-eq-null': 'error',
    'no-eval': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-extra-boolean-cast': 'error',
    'no-extra-label': 'error',
    'no-global-assign': 'error',
    'no-implicit-coercion': ['error', { allow: ['!!'] }],
    'no-implied-eval': 'error',
    'no-invalid-this': 'error',
    'no-iterator': 'error',
    'no-label-var': 'error',
    'no-labels': 'error',
    'no-lone-blocks': 'error',
    'no-lonely-if': 'error',
    'no-loop-func': 'error',
    'no-multi-assign': 'error',
    'no-nested-ternary': 'error',
    'no-new-wrappers': 'error',
    'no-nonoctal-decimal-escape': 'error',
    'no-object-constructor': 'error',
    'no-proto': 'error',
    'no-redeclare': 'error',
    'no-regex-spaces': 'error',
    'no-return-assign': ['error', 'always'],
    'no-sequences': 'error',
    'no-throw-literal': 'error',
    'no-unneeded-ternary': 'error',
    'no-unused-expressions': 'error',
    'no-useless-call': 'error',
    'no-useless-catch': 'error',
    'no-useless-computed-key': 'error',
    'no-useless-concat': 'error',
    'no-useless-constructor': 'error',
    'no-useless-escape': 'error',
    'no-useless-rename': 'error',
    'no-useless-return': 'error',
    'no-void': 'error',
    'no-with': 'error',
    'prefer-const': 'error',
    'prefer-destructuring': ['error', { array: false, object: true }],
    'prefer-object-spread': 'error',
    'prefer-promise-reject-errors': 'error',
    'prefer-template': 'error',
    'require-await': 'error',
    'require-yield': 'error',

    // Typescript

    // Security related
    '@security/detect-bidi-characters': 2,
    '@security/detect-buffer-noassert': 2,
    '@security/detect-child-process': 2,
    '@security/detect-disable-mustache-escape': 2,
    '@security/detect-eval-with-expression': 2,
    '@security/detect-new-buffer': 2,
    '@security/detect-no-csrf-before-method-override': 2,
    '@security/detect-non-literal-fs-filename': 2,
    '@security/detect-non-literal-regexp': 2,
    '@security/detect-non-literal-require': 2,
    // Note: The reason this rule is turned off is because
    // it marks every [] brackets with dynamic index as error.
    // Therefore it is disabled, HOWEVER make sure you DO NOT
    // iterate over object with user input value because it is
    // a major security issue.
    '@security/detect-object-injection': 0,
    '@security/detect-possible-timing-attacks': 2,
    '@security/detect-pseudoRandomBytes': 2,
    '@security/detect-unsafe-regex': 2,
  },
});
